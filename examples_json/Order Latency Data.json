[
  {
    "index": 0,
    "source": [
      "# 注文遅延データ\n",
      "\n",
      "より現実的なバックテスト結果を得るためには、レイテンシを考慮することが重要です。したがって、フ���ードデータと注文データの両方をタイムスタンプ付きで収集し、注文遅延を測定する必要があります。最良のアプローチは、自分自身の注文遅延を収集することです。ライブ取引に基づいて注文遅延を収集するか、定期的に埋められない価格で注文を提出し、記録のためにそれらをキャンセルすることで注文遅延を収集できます。ただし、それらにアクセスできない場合や目標を設定したい場合は、人工的に注文遅延を生成する必要があります。このレイテンシは、フィードレイテンシ、取引量、イベントの数などの要因に基づいてモデル化できます。このガイドでは、調整のための乗数とオフセットを使用して、フィードレイテンシから注文遅延を生成する簡単な方法を示します。"
    ]
  },
  {
    "index": 1,
    "source": [
      "まず、フィードデータを読み込みます。"
    ]
  },
  {
    "index": 3,
    "source": [
      "操作を簡単にするために、DataFrameに変換します。"
    ]
  },
  {
    "index": 5,
    "source": [
      "有効な取引所タイムスタンプと有効なローカルタイムスタンプの両方を持つイベントのみを選択して、フィードレイテンシを取得します。"
    ]
  },
  {
    "index": 7,
    "source": [
      "約1秒間隔にリサンプリングして行数を減らします。"
    ]
  },
  {
    "index": 9,
    "source": [
      "構造化されたNumPy配列に戻します。"
    ]
  },
  {
    "index": 11,
    "source": [
      "注文遅延を生成します。注文遅延は、注文リクエストが取引所のマッチングエンジンに到達するまでのレイテンシと、応答がローカルに戻るまでのレイテンシの2つのコンポーネントで構成されます。注文遅延はフィードレイテンシと同じではなく、フィードレイテンシに比例する必要はありません。ただし、簡単のために、注文遅延をフィードレイテンシに比例するようにモデル化し、乗数とオフセットを使用します。"
    ]
  },
  {
    "index": 14,
    "source": [
      "レイテンシに無効な負の値がないか確認します。"
    ]
  },
  {
    "index": 18,
    "source": [
      "ここでは、速度を上げるために`njit`を使用してプロセス全体をメソッドにラップします。"
    ]
  }
]